%skeleton "lalr1.cc"
%require "3.7"
%language "c++"
%defines
%define api.namespace {hse::model}
%define api.parser.class {CustomParser}
%define api.token.raw
%define api.value.type variant
%define parse.trace
%debug

%code requires{
    #include "json_model.hpp"
    #include <iostream>
    #include <string>
    #include <variant>
    namespace hse::model{
		class CustomDriver;
		class CustomScanner;
	}
}

%parse-param {CustomScanner& scanner}
%parse-param {CustomDriver& driver}

%locations

%code {

    #include "CustomDriver.hpp"
    #undef yylex
    #define yylex scanner.yylex   
}

%token END 0
%token <std::int64_t> INT
%token <double> FLOAT
%token <std::string> STRING
%token <bool> TRUE_ FALSE_
%token <std::monostate> null
%left M_BEGIN M_END S_BEGIN S_END
%left COMMA
%left COLON
%type <hse::model::map_t> MAP
%type <hse::model::map_t> PAIR
%type <hse::model::map_t> MEMBERS
%type <hse::model::seq_t> SEQ
%type <hse::model::seq_t> ELEMENTS
%type <hse::model::node> VALUE

%%

START: MAP {
    driver.result = json(std::move($1));
  }
;
MAP: M_BEGIN M_END {
    $$ = map_t {};
  }
| M_BEGIN MEMBERS M_END {
    $$ = std::move($2);
  }
;
MEMBERS: PAIR {
    $$ = std::move($1);
  }
|  MEMBERS COMMA PAIR {
    $1.merge($3);
    $$ = std::move($1);
  }
;
PAIR: STRING COLON VALUE {
    $$ = map_t{{$1,$3}};
  }
;
SEQ: S_BEGIN S_END {
    $$ = seq_t {};
  }
| S_BEGIN ELEMENTS S_END {
    $$ = std::move($2);
}
;
ELEMENTS: VALUE {
    $$ = seq_t{$1};
  }
|  ELEMENTS COMMA VALUE {
    $1.push_back( $3 );
    $$ = std::move($1);
  }
;
VALUE: 
  STRING {$$=std::move(node($1));}
| INT    {$$=std::move(node($1));}
| FLOAT  {$$=std::move(node($1));}
| MAP    {$$=std::move(node($1));}
| SEQ    {$$=std::move(node($1));}
| TRUE_  {$$=std::move(node(true));}
| FALSE_ {$$=std::move(node(false));}
| null   {$$=std::move(node{});}
;

%%

