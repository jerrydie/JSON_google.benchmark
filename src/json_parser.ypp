%{
    #include <iostream>
    #include <string>
    #include <variant>
    #include "json_model.hpp"
    using namespace hse::model;
    using number_t = std::variant<std::int64_t, double>;
    #define YYSTYPE char*
    int yylex( node::storage_t* yylval, void * );
%}

%parse-param {json &storage}
%token <number_t> NUMBER
%token <std::string> STRING
%token <bool> TRUE_ FALSE_
%token <std::monostate> null
%left M_BEGIN M_END S_BEGIN S_END
%left COMMA
%left COLON
%type <map_t> MAP
%type <map_t> PAIR
%type <map_t> 	MEMBERS
%type <seq_t> SEQ
%type <seq_t> ELEMENTS
%type <node> VALUE
%%

START: MAP {
    storage = json($1);
  }
;
MAP: M_BEGIN M_END {
    $$ = map_t {};
  }
| M_BEGIN MEMBERS M_END {
    $$ = $2;
  }
;
MEMBERS: PAIR {
    $$ = $1;
  }
| PAIR COMMA MEMBERS {
    $$ = $3.merge($1);
  }
;
PAIR: STRING COLON VALUE {
    $$ = map_t{{$1,$3}};
  }
;
SEQ: S_BEGIN S_END {
    $$ = seq_t {};
  }
| S_BEGIN ELEMENTS S_END {
    $$ = $2;
}
;
ELEMENTS: VALUE {
    $$ = seq_t{$1};
  }
| VALUE COMMA ELEMENTS {
    $3.reserve( $1.size() + $3.size() );
    $$ = $3.insert( $3.end(), $1.begin(), $1.end() );
  }
;
VALUE: 
  STRING {$$=node(yylval);}
| NUMBER {$$=node(yylval);}
| MAP {$$=node($1);}
| SEQ {$$=node($1);}
| TRUE_ {$$=node(true);}
| FALSE_ {$$=node(false);}
| null {$$=node(std::monostate);}
;

%%

